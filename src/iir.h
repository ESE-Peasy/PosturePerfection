/**
 * @file iir.h
 * @brief Very simple IIR filter
 *
 * @copyright Copyright (C) 2021  Miklas Riechmann
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */
#ifndef SRC_IIR_H_
#define SRC_IIR_H_

#include <stdlib.h>

#include <vector>

namespace IIR {

/**
 * @brief Taps inside the second-order IIR filter
 *
 */
struct Nodes {
  float b0;
  float b1;
  float b2;
  float a0;
  float a1;
  float a2;
  float tap1;
  float tap2;
};

/**
 * @brief Settings for an IIR filter
 *
 * Wraps the second-order section coefficients for an IIR filter. The
 * `sos_coefficients` are a 2D vector, where the rows correspond to each of the
 * second order stages, and the columns correspond to coefficients for each
 * stage.
 *
 */
struct SmoothingSettings {
  std::vector<std::vector<float>> coefficients;
};

/**
 * @brief Second-order IIR filter stage, for use with the `IIRFilter`
 *
 */
class IIR2ndOrderFilter {
 private:
  Nodes nodes;

 public:
  /**
   * @brief Construct a new `IIR2ndOrderFilter` object
   *
   * @param coefficients List of `float` coefficients for use in the IIR filter
   * stage
   */
  explicit IIR2ndOrderFilter(std::vector<float> coefficients);

  /**
   * @brief Apply the filter to the next data sample, `x`
   *
   * Every call to this method constitutes a time step in the IIR filter
   *
   * @param x The next data sample
   * @return float Filtered data sample
   */
  float run(float x);
};

/**
 * @brief An IIR filter that can be initialised with SOS coefficients
 *
 * This class is intended to be used with SOS coefficients as generated by the
 * SciPy functions referenced here:
 * https://docs.scipy.org/doc/scipy/reference/signal.html#matlab-style-iir-filter-design.
 *
 * The filter can be disabled by passing no coefficients to the constructor.
 *
 */
class IIRFilter {
 private:
  /**
   * @brief Vector of the constituent second-order filters
   *
   */
  std::vector<IIR2ndOrderFilter> filters;

 public:
  /**
   * @brief Construct a new `IIRFilter` object
   *
   * Passing empty `SmoothingSettings` disbales the IIR filter.
   *
   * @param smoothing_settings `SmoothingSettings` structure
   * containing the SOS coefficients for the IIR filter
   */
  explicit IIRFilter(SmoothingSettings smoothing_settings);

  /**
   * @brief Apply the filter to the next data sample, `x`
   *
   * Every call to this method constitutes a time step in the IIR filter
   *
   * @param x The next data sample
   * @return float Filtered data sample
   */
  float run(float x);
};

}  // namespace IIR
#endif  // SRC_IIR_H_
